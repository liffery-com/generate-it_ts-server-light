import express from 'express'
import Router from 'express-promise-router'
{% if pathMethodsHaveAttr(operations, 'security') %}import accessTokenMiddleware from '../middleware/accessTokenMiddleware'{% endif %}
{% if pathMethodsHaveAttr(operations, 'x-cache') %}import apiCaching from '../middleware/apiCaching'{% endif %}
{% if pathMethodsHaveAttr(operations, 'x-permission') %}import permissionMiddleware from '../middleware/permissionMiddleware'{% endif %}
{% if pathMethodsHaveAttr(operations, 'x-async-validators') %}import asyncValidationMiddleware from '../middleware/asyncValidationMiddleware'{% endif %}
{% if pathMethodsHaveAttr(operations, 'x-worker') %}import WorkerService from '../request-worker/WorkerService'{% endif %}
import {{ucFirst(operation_name)}}Domain from '../../../domains/{{ucFirst(operation_name)}}Domain'
import {{_.camelCase(operation_name)}}TransformOutputs from '../transformOutputs/{{operation_name}}TransformOutput'
import GenerateItExpressResponse from '@/http/nodegen/interfaces/GenerateItExpressResponse';

export default function() {
  const router = Router();
  {% for op in operations -%}
  {% for method, path in op.path -%}
  {% if isValidMethod(method)%}
  /**
   * Operation ID: {{ path.operationId }}
   * {% if path.summary %}Summary: {{ path.summary }}{% endif %}
   * {% if path.description %}Description: {{ path.description | trim }}{% endif %}
   */
  {% set securityNames = getSecurityNames(path, swagger) %}
  router.{{method}}(
    '{{op.subresource}}',
      {% if securityNames %}accessTokenMiddleware({{ securityNames }}  {% if path['x-passThruWithoutJWT'] %}, {passThruWithoutJWT: true}{% endif %}), /* Validate request security tokens */{% endif %}
      {% if path['x-permission'] %}permissionMiddleware('{{ path['x-permission'] }}'), /* Check permission of the incoming user */ {% endif %}
      {% if path['x-async-validators'] %}asyncValidationMiddleware({{ path['x-async-validators'] | dump }}), /* Call an async validator function and throw an appropriate error */ {% endif %}
      {% if path['x-cache'] %}apiCaching({{_.camelCase(operation_name)}}TransformOutputs.{{path.operationId}}), /* Lastly, if x-cache is found, call the api cache middleware */ {% endif %}
    async (req: any, res: GenerateItExpressResponse) => {
      {% if not path['x-passResponse'] -%}res.inferResponseType( {% endif %}
          {% if path['x-worker'] -%}
        await WorkerService.handleRequestWithWorker(req, '{{ucFirst(operation_name)}}Domain', '{{path.operationId}}', [{{pathParamsToDomainParams(method, path, false, true, 'params')}}]),
          {% else -%}
        await {{ucFirst(operation_name)}}Domain.{{path.operationId}}({{pathParamsToDomainParams(method, path, false, true, 'params')}}){% if not path['x-passResponse'] -%},{% endif %}
          {% endif -%}
          {% if not path['x-passResponse'] -%}{{ getSingleSuccessResponse(path.responses) or 200 }},
          {% if path.produces -%}'{{ path.produces }}'{% else %}undefined{% endif %},
          {{_.camelCase(operation_name)}}TransformOutputs.{{path.operationId}}
    ){% endif %}
    }
  );
  {% endif %}
  {%- endfor %}
  {%- endfor %}

  return router
}
